// Code generated by MockGen. DO NOT EDIT.
// Source: modules/text/repository/repo.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	domain "github.com/Masum-Osman/lex-scope/modules/text/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockTextRepository is a mock of TextRepository interface.
type MockTextRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTextRepositoryMockRecorder
}

// MockTextRepositoryMockRecorder is the mock recorder for MockTextRepository.
type MockTextRepositoryMockRecorder struct {
	mock *MockTextRepository
}

// NewMockTextRepository creates a new mock instance.
func NewMockTextRepository(ctrl *gomock.Controller) *MockTextRepository {
	mock := &MockTextRepository{ctrl: ctrl}
	mock.recorder = &MockTextRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTextRepository) EXPECT() *MockTextRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTextRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTextRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTextRepository)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockTextRepository) GetByID(ctx context.Context, id string) (*domain.Text, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*domain.Text)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTextRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTextRepository)(nil).GetByID), ctx, id)
}

// Save mocks base method.
func (m *MockTextRepository) Save(ctx context.Context, text *domain.Text) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockTextRepositoryMockRecorder) Save(ctx, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTextRepository)(nil).Save), ctx, text)
}

// Update mocks base method.
func (m *MockTextRepository) Update(ctx context.Context, text *domain.Text) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTextRepositoryMockRecorder) Update(ctx, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTextRepository)(nil).Update), ctx, text)
}
